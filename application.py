# -*- coding: utf-8 -*-
"""ASSURANCE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/bigirimanainnocent12/RandomForestRegressor/blob/main/ASSURANCE.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile application.py
# import streamlit as st
# import pandas as pd
# import os
# from sklearn.model_selection import train_test_split, GridSearchCV
# from sklearn.ensemble import RandomForestRegressor
# from sklearn.preprocessing import OneHotEncoder, StandardScaler
# from sklearn.compose import ColumnTransformer
# from sklearn.pipeline import make_pipeline
# import kagglehub
# 
# # Télécharger les données depuis Kaggle et charger le dataset
# def download_and_load_data():
#     chemin = kagglehub.dataset_download("harishkumardatalab/medical-insurance-price-prediction")
#     print("Path to dataset files:", chemin)
# 
#     for filename in os.listdir(chemin):
#         if filename.endswith(".csv"):
#             csv_file_path = os.path.join(chemin, filename)
#             break
# 
#     # Charger les données
#     df = pd.read_csv(csv_file_path)
# 
#     # Appliquer les transformations nécessaires
#     map_smoker = {'yes': 1, 'no': 0}
#     df['smoker'] = df['smoker'].map(map_smoker).astype(bool)
# 
#     map_sex = {'male': 1, 'female': 0}
#     df['sex'] = df['sex'].map(map_sex).astype(bool)
# 
#     map_region = {'southwest': 'Nord', 'southeast': 'Sud', 'northwest': 'Est', 'northeast': 'Ouest'}
#     df['region'] = df['region'].map(map_region)
# 
#     return df
# 
# # Entraîner le modèle
# def train_model():
#     try:
#         # Télécharger et charger les données
#         df = download_and_load_data()
# 
#         # Préparer les données
#         Y = df['charges']
#         X = df.drop(['charges'], axis=1)
# 
#         # Séparer les données en ensembles d'entraînement et de test
#         X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
# 
#         # Préprocesseur pour les variables qualitatives et quantitatives
#         preprocessor = ColumnTransformer(transformers=[
#             ('Variables quantitatives', StandardScaler(), X.select_dtypes(include=['float64', 'int64']).columns),
#             ('Variable qualitative', OneHotEncoder(sparse_output=False, handle_unknown='ignore'), X.select_dtypes(include=['object']).columns),
#             ('Variables binaires', 'passthrough', X.select_dtypes(include=['bool']).columns)
#         ])
# 
#         # Pipeline avec le modèle RandomForestRegressor
#         model = make_pipeline(
#             preprocessor,
#             RandomForestRegressor()
#         )
# 
#         # Définir les paramètres pour GridSearchCV
#         param_grid = {
#             'randomforestregressor__n_estimators': [50, 100, 200],
#             'randomforestregressor__max_depth': [None, 10, 20],
#             'randomforestregressor__min_samples_split': [2, 5, 10],
#             'randomforestregressor__min_samples_leaf': [1, 2, 4]
#         }
# 
#         # Optimisation des hyperparamètres avec GridSearchCV
#         grid_model = GridSearchCV(model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error')
#         grid_model.fit(X_train, y_train)
# 
#         # Retourner le modèle entraîné
#         st.success("Modèle entraîné avec succès.")
#         return grid_model.best_estimator_
#     except Exception as e:
#         st.error(f"Erreur lors de l'entraînement du modèle : {str(e)}")
#         return None
# 
# model = train_model()
# 
# # Vérifiez si le modèle est valide
# if model and not hasattr(model, "predict"):
#     st.error("Le modèle entraîné n'a pas de méthode 'predict'. Vérifiez vos étapes d'entraînement.")
# elif not model:
#     st.error("Le modèle n'a pas pu être entraîné correctement.")
# 
# # Interface utilisateur
# st.title("Déploiement d'un modèle RandomForestRegressor()")
# 
# st.subheader("Simuler vos dépenses médicales")
# 
# # Champs d'entrée utilisateur
# age = st.number_input("Quel âge avez-vous ?", min_value=0, step=1, format="%d")
# sex = st.radio("Quel est votre sexe ?", ["Homme", "Femme"])
# bmi = st.number_input("Quel est votre IMC (Indice de Masse Corporelle) ?", min_value=0.0, step=0.1, format="%.1f")
# children = st.number_input("Nombre d'enfants", min_value=0, step=1, format="%d")
# smoker = st.radio("Est-ce que vous fumez ?", ["Oui", "Non"])
# region = st.radio("Quelle est votre région ?", ["Nord", "Sud", "Est", "Ouest"])
# 
# if st.button("Simulation"):
#     try:
#         # Afficher les données saisies par le client
#         st.subheader("Données saisies par le client :")
#         donne = pd.DataFrame({
#             "Age": [age],
#             "Sexe": [sex],
#             "Indice de Masse Corporelle": [bmi],
#             "Nombre d'enfants": [children],
#             "Fumeur": [smoker],
#             "Région": [region]
#         })
#         st.write(donne)
# 
#         # Encodage des variables qualitatives
#         sex_encoded = False if sex == "Femme" else True
#         smoker_encoded = True if smoker == "Oui" else False
# 
#         # Préparer les données pour le modèle
#         input_data = pd.DataFrame({
#             'age': [age],
#             'sex': [sex_encoded],
#             'bmi': [bmi],
#             'children': [children],
#             'smoker': [smoker_encoded],
#             'region': [region]
#         })
# 
#         # Prédiction avec le modèle
#         if model:
#             prediction = model.predict(input_data)
#             st.success(f"Les dépenses médicales pour ce client seront : {prediction[0]:.2f} $")
#         else:
#             st.error("Le modèle n'est pas disponible pour effectuer la prédiction.")
#     except Exception as e:
#         st.error(f"Une erreur est survenue : {str(e)}")
#