# -*- coding: utf-8 -*-
"""ASSURANCE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/bigirimanainnocent12/RandomForestRegressor/blob/main/ASSURANCE.ipynb
"""

import kagglehub

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline


import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_percentage_error
from sklearn.preprocessing import OneHotEncoder, StandardScaler, FunctionTransformer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import make_pipeline


chemin = kagglehub.dataset_download("harishkumardatalab/medical-insurance-price-prediction")


for filename in os.listdir(chemin):
    if filename.endswith(".csv"):
        csv_file_path = os.path.join(chemin, filename)
        break


df = pd.read_csv(csv_file_path)





Y = df['charges']
X = df.drop(['charges'], axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

preprocessor = ColumnTransformer(transformers=[
    ('Variables quantitatives', StandardScaler(), X.select_dtypes(include=['float64', 'int64']).columns),
    ('Variable qualitative', OneHotEncoder(sparse_output=False, handle_unknown='ignore'), X.select_dtypes(include=['object']).columns),
    ('Variables binaires', 'passthrough', X.select_dtypes(include=['bool']).columns)


])






model = make_pipeline(
    preprocessor,
    RandomForestRegressor()
)


param_grid = {
    'randomforestregressor__n_estimators': [50, 100, 200],
    'randomforestregressor__max_depth': [None, 10, 20],
    'randomforestregressor__min_samples_split': [2, 5, 10],
    'randomforestregressor__min_samples_leaf': [1, 2, 4]
}

grid_model = GridSearchCV(model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error')


modele=grid_model.fit(X_train, y_train)





import joblib
modele=modele.best_estimator_
joblib.dump(modele,'modele.pkl')






import streamlit as st
import joblib
import pandas as pd


@st.cache_resource
def load_model():

    try:
        with open("modele.pkl", "rb") as file:
            model = joblib.load(file)
        return model
    except Exception as e:
        st.error(f"Erreur lors du chargement du modèle : {str(e)}")
        return None

model = load_model()


if model and not hasattr(model, "predict"):
    st.error("Le modèle chargé n'a pas de méthode 'predict'. Vérifiez que vous avez bien enregistré un modèle scikit-learn valide.")
elif not model:
    st.error("Le modèle n'a pas pu être chargé correctement. Veuillez vérifier le fichier.")


st.title("Déploiement d'un modèle RandomForestRegressor()")

st.subheader("Simuler vos dépenses médicales")


age = st.number_input("Quel âge avez-vous ?", min_value=0, step=1, format="%d")
sex = st.radio("Quel est votre sexe ?", ["Homme", "Femme"])
bmi = st.number_input("Quel est votre IMC (Indice de Masse Corporelle) ?", min_value=0.0, step=0.1, format="%.1f")
children = st.number_input("Nombre d'enfants", min_value=0, step=1, format="%d")
smoker = st.radio("Est-ce que vous fumez ?", ["Oui", "Non"])
region = st.radio("Quelle est votre région ?", ["Nord", "Sud", "Est", "Ouest"])

if st.button("Simulation"):
    try:

        st.subheader("Données saisies par le client :")
        donne = pd.DataFrame({
            "Age": [age],
            "Sexe": [sex],
            "Indice de Masse Corporelle": [bmi],
            "Nombre d'enfants": [children],
            "Fumeur": [smoker],
            "Région": [region]
        })
        st.write(donne)


        sex_encoded = False if sex == "Femme" else True
        smoker_encoded = True if smoker == "Oui" else False


        input_data = pd.DataFrame({
            'age': [age],
            'sex': [sex_encoded],
            'bmi': [bmi],
            'children': [children],
            'smoker': [smoker_encoded],
            'region': [region]
        })


        if model:
            prediction = model.predict(input_data)
            st.success(f"Les dépenses médicales pour ce client seront : {prediction[0]:.2f} $")
        else:
            st.error("Le modèle n'est pas disponible pour effectuer la prédiction.")
    except Exception as e:
        st.error(f"Une erreur est survenue : {str(e)}")

